package Server.Interface;

import Server.RMI.InvalidTransactionException;
import Server.RMI.TransactionAbortedException;

import java.rmi.Remote;
import java.rmi.RemoteException;

public interface ITransactionManager extends Remote {
    /**
     * Return an xid generated by the TM
     * @return the generated xid for the transaction
     * **/
    int start() throws RemoteException;

    /**
     * Middleware forwards this to TM. TM release all locks held by this T and update wait list.
     * @param transactionId the T to be committed
     * @return result of this commit
     * @throws RemoteException
     * @throws TransactionAbortedException
     * @throws InvalidTransactionException
     */
    boolean commit(int transactionId) throws RemoteException, TransactionAbortedException, InvalidTransactionException;

    /**
     * Middleware forwards this to TM. TM release all locks held by this T and update wait list
     * @param transactionId the T to be aborted
     * @throws RemoteException
     * @throws InvalidTransactionException
     */
    void abort(int transactionId) throws RemoteException, InvalidTransactionException;

    /**
     * Exit all servers. Assume no active transaction and no recovery needed
     * @return result of the shutdown
     * @throws RemoteException
     */
    boolean shutdown() throws RemoteException;
}
